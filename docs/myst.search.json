{"version":"1","records":[{"hierarchy":{"lvl1":"SZD HOMEWORKS"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"SZD HOMEWORKS"},"content":"Repository with code for SZD1 and SZD2 homeworks. Homeworks are deployed \n\nhere using github pages and Jupyter Book","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"SZD HOMEWORKS","lvl2":"Development enviroment setup"},"type":"lvl2","url":"/#development-enviroment-setup","position":2},{"hierarchy":{"lvl1":"SZD HOMEWORKS","lvl2":"Development enviroment setup"},"content":"Create python enviroment:python -m venv SZD\n\nClone dev branch of the repo to enviroment folder:cd SZD\ngit clone -b dev https://github.com/TheLittleRock/SZD.git\n\nActivate python virtual enviroment:\n\nLinux:source SZD/bin/activate\n\nWindows:.SZD\\Scripts\\Activate.ps1\n\nInstall requered packages: pip install -r requirements.txt\n\nInstall QADA python virtual enviroment to Jupyter:python -m ipykernel install --user --name=SZD","type":"content","url":"/#development-enviroment-setup","position":3},{"hierarchy":{"lvl1":"SZD HOMEWORKS","lvl2":"Building docs locally"},"type":"lvl2","url":"/#building-docs-locally","position":4},{"hierarchy":{"lvl1":"SZD HOMEWORKS","lvl2":"Building docs locally"},"content":"To build webpage locally use this command inside repo’s root folder:jupyter book start","type":"content","url":"/#building-docs-locally","position":5},{"hierarchy":{"lvl1":"HOMEWORK I"},"type":"lvl1","url":"/homework-1","position":0},{"hierarchy":{"lvl1":"HOMEWORK I"},"content":"","type":"content","url":"/homework-1","position":1},{"hierarchy":{"lvl1":"HOMEWORK I","lvl2":"Imports and stuff"},"type":"lvl2","url":"/homework-1#imports-and-stuff","position":2},{"hierarchy":{"lvl1":"HOMEWORK I","lvl2":"Imports and stuff"},"content":"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n%config InlineBackend.figure_formats = ['png']\nplt.rcParams['figure.dpi'] = 600\n\n#gauss distribution\ndef carl_friedrich(x,a,mu,sig):\n    return a * np.exp(-(x - mu)**2/(2*sig**2))\n\nSetting the parameters for matplotlib backend. Using TeX as backend for text.\n\nparams = {\n      'text.latex.preamble': r\"\\usepackage{mlmodern}\",\n      'legend.fontsize': 9,\n      'axes.labelsize': 9,\n      'axes.titlesize': 11,\n      'xtick.labelsize' :9,\n      'ytick.labelsize' : 9,\n      #'mathtext.fontset': 'cm',\n      #'mathtext.rm': 'stixsans',\n      'font.family' : 'mlmodern', \n      #'font.family' : 'sans-serif',\n      'text.usetex' : True,\n      }\nplt.rcParams.update(params)\n\n\n\n","type":"content","url":"/homework-1#imports-and-stuff","position":3},{"hierarchy":{"lvl1":"HOMEWORK I","lvl2":"Getting data"},"type":"lvl2","url":"/homework-1#getting-data","position":4},{"hierarchy":{"lvl1":"HOMEWORK I","lvl2":"Getting data"},"content":"\n\nLoading provided data and generating datasets based on parameters μ and σ of Gaussian distribution. Which bins are used as parameters for sampled gaussian distribution is given by selected_bins. Selected bins and their count can be changed and the code should still work.\n\ndata = np.loadtxt(\"data/data.csv\", skiprows=1, delimiter=\",\") #load dataset\n\nselected_bins = [11,12,13,14,15,16,17] #bins from dataset to select for gaussian sampling\nbins = len(selected_bins) #number of selected bins\nsamples = 100000 #no. of samples taken\n\nhpp_samples, hAA_samples, ratios = [],[],[]\n\ndataSelected = np.take(data, selected_bins, axis=0) #select bins given by indexes from array selected_bins from data\n\nfor row in dataSelected:  #iterates over data. Data in format: [index | hpp | hpp_error | hAA | hAA_error] \n    \n    hAA = np.random.normal(row[3], row[4], samples) #randomly samples gaussian distribution with parameters gicen by data\n    hpp = np.random.normal(row[1], row[2], samples)\n\n    hpp_samples.append(hpp)\n    hAA_samples.append(hAA)\n    ratios.append(hAA/hpp)\n\n#_, hpp_mu, hpp_sig, hAA_mu, hAA_sig = dataSelected.T\n\n","type":"content","url":"/homework-1#getting-data","position":5},{"hierarchy":{"lvl1":"HOMEWORK I","lvl2":"Fit"},"type":"lvl2","url":"/homework-1#fit","position":6},{"hierarchy":{"lvl1":"HOMEWORK I","lvl2":"Fit"},"content":"\n\nsigmaL, sigmaR, paramsL, paramsR, limits, xrange = [],[],[],[], [], []\n\nfor hist in ratios:\n    \n    vals, edges = np.histogram(hist,bins=50) #histogram from individual measurement values\n    centers = (edges[1:] + edges[:-1]) / 2 #calculation of center of bins\n    limit = np.argmax(vals) #index of bin with the maximum value\n\n    limits.append(limit)\n    xrange.append(centers)\n\n    popt, _ = curve_fit(carl_friedrich, centers[:limit+1], vals[:limit+1]) #left fit of the histogram using carl\n    sigmaL.append(popt[2])\n    paramsL.append(popt)\n    \n    popt, _ = curve_fit(carl_friedrich, centers[limit:], vals[limit:]) #right fit of the histogram using carl\n    sigmaR.append(popt[2])\n    paramsR.append(popt)\n\n","type":"content","url":"/homework-1#fit","position":7},{"hierarchy":{"lvl1":"HOMEWORK I","lvl2":"Plotting"},"type":"lvl2","url":"/homework-1#plotting","position":8},{"hierarchy":{"lvl1":"HOMEWORK I","lvl2":"Plotting"},"content":"\n\nfig, axs = plt.subplots(bins, 3, layout=\"constrained\", figsize=(12, 2*bins))\n#fig.subplots_adjust(hspace=0, vspace=0) #graphs without spacing\n\nfor (col1, col2, col3), hAA, hpp, ratio, legend, pL, pR, x, limit in zip(axs, hAA_samples, hpp_samples, ratios, dataSelected, paramsL, paramsR, xrange, limits): #iteration through all of the data needed for plotting\n    \n    col1.hist(hAA, bins = 50, color='lightskyblue', edgecolor='dodgerblue', alpha=.8, label = '$\\mu = {:.1e}$ \\n $\\sigma = {:.1e}$'.format(legend[3],legend[4])) #col1 corresponds to hAA\n    col2.hist(hpp, bins = 50, color='seagreen', edgecolor='darkgreen', alpha=.8, label = '$\\mu = {:.1e}$ \\n $\\sigma = {:.1e}$'.format(legend[1],legend[2])) #col2 corresponds to hpp\n    col3.hist(ratio, bins = 50, color='lightcoral', edgecolor='dimgrey', alpha=.8) #col3 corresponds to Ratios\n\n    col3.plot(x[:limit+1], carl_friedrich(x[:limit+1],*pL),c='navy', lw=1, label = '$\\sigma_l = {:.2e}$'.format(np.abs(pL[2]))) #plot of the left fit\n    col3.plot(x[limit:], carl_friedrich(x[limit:],*pR), c='crimson', lw=1, label = '$\\sigma_r = {:.2e}$'.format(np.abs(pR[2]))) #plot of the right fit   \n    \n    col1.legend(loc=\"upper right\", fontsize=10, fancybox=False, borderpad=.2)\n    col2.legend(loc=\"upper right\", fontsize=10, fancybox=False, borderpad=.2)\n    col3.legend(loc=\"upper right\", fontsize=10, fancybox=False, borderpad=.2)\n    \n\naxs[0,0].set_title(\"hAA\")\naxs[0,1].set_title(\"hpp\")\naxs[0,2].set_title(\"Ratio\")\n\n#plt.savefig('output/hw1.svg')\nplt.show()","type":"content","url":"/homework-1#plotting","position":9},{"hierarchy":{"lvl1":"HOMEWORK II"},"type":"lvl1","url":"/homework-2","position":0},{"hierarchy":{"lvl1":"HOMEWORK II"},"content":"","type":"content","url":"/homework-2","position":1},{"hierarchy":{"lvl1":"HOMEWORK II","lvl2":"Imports and stuff"},"type":"lvl2","url":"/homework-2#imports-and-stuff","position":2},{"hierarchy":{"lvl1":"HOMEWORK II","lvl2":"Imports and stuff"},"content":"\n\n#import matplotlib\n#matplotlib.use('svg')\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n#%config InlineBackend.figure_formats = ['svg']\n%config InlineBackend.figure_format='svg'\n#plt.rcParams['figure.format'] = 'svg'\n#from IPython.display import set_matplotlib_formats\n#set_matplotlib_formats('svg', 'pdf')\n#gauss distribution\ndef carl_friedrich(x,a,mu,sig):\n    return a * np.exp(-(x - mu)**2/(2*sig**2))\n\n#plt.rcParams.keys()\n\nparams = {\n     'text.latex.preamble': r\"\\usepackage{mlmodern}\",\n      'legend.fontsize': 9,\n      'axes.labelsize': 9,\n      'axes.titlesize': 11,\n      'xtick.labelsize' :9,\n      'ytick.labelsize' : 9,\n      #'mathtext.fontset': 'cm',\n      #'mathtext.rm': 'stixsans',\n      'font.family' : 'mlmodern', \n      #'font.family' : 'sans-serif',\n      'text.usetex' : True,\n      }\nplt.rcParams.update(params)\n\n","type":"content","url":"/homework-2#imports-and-stuff","position":3},{"hierarchy":{"lvl1":"HOMEWORK II","lvl2":"Generate data"},"type":"lvl2","url":"/homework-2#generate-data","position":4},{"hierarchy":{"lvl1":"HOMEWORK II","lvl2":"Generate data"},"content":"\n\nsamples = 100000\n\nbackground = np.random.uniform(0,1000,samples)\nsignal = np.random.normal(410, 100, 20000)\n\ndata = np.concatenate((background, signal))\n\n\n\nFigure 1:Test\n\n%matplotlib inline\n\nplt.figure(figsize=(6, 4))\nplt.hist(data, bins=100)\nplt.hist(background,bins=100)\nplt.show()","type":"content","url":"/homework-2#generate-data","position":5},{"hierarchy":{"lvl1":"HOMEWORK III"},"type":"lvl1","url":"/homework-3","position":0},{"hierarchy":{"lvl1":"HOMEWORK III"},"content":"","type":"content","url":"/homework-3","position":1},{"hierarchy":{"lvl1":"HOMEWORK III","lvl2":"Imports and stuff"},"type":"lvl2","url":"/homework-3#imports-and-stuff","position":2},{"hierarchy":{"lvl1":"HOMEWORK III","lvl2":"Imports and stuff"},"content":"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n#gauss distribution\ndef carl_friedrich(x,a,mu,sig):\n    return a * np.exp(-(x - mu)**2/(2*sig**2))\n\nparams = {\n      'text.latex.preamble': r\"\\usepackage{mlmodern}\",\n      'legend.fontsize': 9,\n      'axes.labelsize': 9,\n      'axes.titlesize': 11,\n      'xtick.labelsize' :9,\n      'ytick.labelsize' : 9,\n      #'mathtext.fontset': 'cm',\n      #'mathtext.rm': 'stixsans',\n      'font.family' : 'mlmodern', \n      #'font.family' : 'sans-serif',\n      'text.usetex' : True,\n      }\nplt.rcParams.update(params)\n\n","type":"content","url":"/homework-3#imports-and-stuff","position":3},{"hierarchy":{"lvl1":"HOMEWORK III","lvl2":"Generate data"},"type":"lvl2","url":"/homework-3#generate-data","position":4},{"hierarchy":{"lvl1":"HOMEWORK III","lvl2":"Generate data"},"content":"\n\nsamples = 30000\n\nbg1 = np.random.uniform(0,1000,samples)\nbg2 = np.random.uniform(0,1000,samples)\nsignal = np.random.normal(410, 50, 3000)\n\nbg_hist1, x = np.histogram(bg1, bins=100)\nbg_hist2, _ = np.histogram(bg2, bins=100)\n\nbackground = np.repeat((x[1:]+x[:-1])/2, np.abs(bg_hist1 - bg_hist2))\ndata = np.concatenate((background, signal))\n\nplt.hist(data, bins=100)\n#plt.hist(background,bins=100)\nplt.show()","type":"content","url":"/homework-3#generate-data","position":5},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/root-test","position":0},{"hierarchy":{"lvl1":""},"content":"import ROOT\n%jsroot on\n\ncanvas = ROOT.TCanvas()\ntest = ROOT.TH1D(\"example\",\"example\",100,-5.,5.)\ntest.FillRandom(\"gaus\",100000)\ntest.Draw()\ncanvas.Draw()\n\ncanvas2 = ROOT.TCanvas()\nf = ROOT.TF1(\"f1\", \"sin(x)/x\", 0., 100.)\nf.Draw()\ncanvas2.Draw()\n\ncanvas.Draw()","type":"content","url":"/root-test","position":1}]}